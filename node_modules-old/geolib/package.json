{
  "name": "geolib",
  "homepage": "http://github.com/manuelbieh/Geolib",
  "author": {
    "name": "Manuel Bieh",
    "url": "http://www.manuelbieh.com/"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/manuelbieh/geolib.git"
  },
  "devDependencies": {
    "grunt": "~0.4",
    "grunt-cli": "*",
    "grunt-contrib-uglify": "~0.2",
    "grunt-contrib-concat": "~0.3",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-copy": "~0.4",
    "grunt-contrib-qunit": "~0.2.0",
    "grunt-text-replace": "~0.3.6",
    "grunt-contrib-jshint": "~0.6.2",
    "phantomjs": "~1.8.0",
    "grunt-jslint": "~1.0.0",
    "time-grunt": "~0.3.1",
    "load-grunt-tasks": "~0.4.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  ],
  "files": [
    "dist/geolib.js",
    "dist/geolib.elevation.js"
  ],
  "description": "Library to perform geo specific tasks",
  "keywords": [
    "geolocation",
    "geo",
    "distance",
    "geojson",
    "geospatial",
    "lbs",
    "location"
  ],
  "scripts": {
    "test": "grunt travis --verbose"
  },
  "version": "2.0.14",
  "main": "dist/geolib.js",
  "readme": "# Geolib v2.0.14\r\n[![Build Status](https://secure.travis-ci.org/manuelbieh/Geolib.png?branch=master)](http://travis-ci.org/manuelbieh/Geolib)\r\n\r\nLibrary to provide basic geospatial operations like distance calculation, conversion of decimal coordinates to sexagesimal and vice versa, etc.\r\n\r\n[View demo](http://www.manuel-bieh.de/publikationen/scripts/geolib/demo.html)\r\n\r\n<h2>Methods</h2>\r\n\r\n<h3>geolib.getDistance(object start, object end[, int accuracy])</h3>\r\n\r\nCalculates the distance between two geo coordinates\r\n\r\nTakes 2 or 3 arguments. First 2 arguments must be an object with latitude and a longitude properties (e.g. `{latitude: 52.518611, longitude: 13.408056}`). Coordinates can be in sexagesimal or decimal format. 3rd argument is accuracy (in meters). So a calculated distance of 1248 meters with an accuracy of 100 is returned as `1200` (accuracy 10 = `1250` etc.).\r\n\r\nReturn value is always an integer and represents the distance in meters.\r\n\r\n<h4>Examples</h4>\r\n\r\n<pre>geolib.getDistance(\r\n\t{latitude: 51.5103, longitude: 7.49347}, \r\n\t{latitude: \"51° 31' N\", longitude: \"7° 28' E\"}\r\n);\r\ngeolib.getDistance(\r\n\t{latitude: 51.5103, longitude: 7.49347}, \r\n\t{latitude: \"51° 31' N\", longitude: \"7° 28' E\"}\r\n);\r\n\r\n// Working with W3C Geolocation API\r\nnavigator.geolocation.getCurrentPosition(\r\n\tfunction(position) {\r\n\t\talert('You are ' + geolib.getDistance(position.coords, {\r\n\t\t\tlatitude: 51.525, \r\n\t\t\tlongitude: 7.4575\r\n\t\t}) + ' meters away from 51.525, 7.4575');\r\n\t}, \r\n\tfunction() { \r\n\t\talert('Position could not be determined.')\r\n\t}, \r\n\t{\r\n\t\tenableHighAccuracy: true\r\n\t}\r\n);\r\n</pre>\r\n\r\n<h3>geolib.getCenter(array coords)</h3>\r\n\r\nCalculates the geographical center of all points in a collection of geo coordinates\r\n\r\nTakes an object or array of coordinates and calculates the center of it.\r\n\r\nReturns an object: `{\"latitude\": centerLat, \"longitude\": centerLng, \"distance\": diagonalDistance}`\r\n\r\n<h4>Examples</h4>\r\n\r\n<pre>var spots = {\r\n\t\"Brandenburg Gate, Berlin\": {latitude: 52.516272, longitude: 13.377722},\r\n\t\"Dortmund U-Tower\": {latitude: 51.515, longitude: 7.453619},\r\n\t\"London Eye\": {latitude: 51.503333, longitude: -0.119722},\r\n\t\"Kremlin, Moscow\": {latitude: 55.751667, longitude: 37.617778},\r\n\t\"Eiffel Tower, Paris\": {latitude: 48.8583, longitude: 2.2945},\r\n\t\"Riksdag building, Stockholm\": {latitude: 59.3275, longitude: 18.0675},\r\n\t\"Royal Palace, Oslo\": {latitude: 59.916911, longitude: 10.727567}\r\n}\r\n\r\ngeolib.getCenter(spots);\r\n\r\ngeolib.getCenter([\r\n\t{latitude: 52.516272, longitude: 13.377722}, \r\n\t{latitude: 51.515, longitude: 7.453619}, \r\n\t{latitude: 51.503333, longitude: -0.119722}\r\n]);\r\n</pre>\r\n\r\n<h3>geolib.isPointInside(object latlng, array coords)</h3>\r\n\r\nChecks whether a point is inside of a polygon or not. \r\nNote: the polygon coords must be in correct order!\r\n\r\nReturns true or false\r\n\r\n<h4>Example</h4>\r\n\r\n<pre>\r\ngeolib.isPointInside(\r\n\t{latitude: 51.5125, longitude: 7.485}, \r\n\t[\r\n\t\t{latitude: 51.50, longitude: 7.40},\r\n\t\t{latitude: 51.555, longitude: 7.40},\r\n\t\t{latitude: 51.555, longitude: 7.625},\r\n\t\t{latitude: 51.5125, longitude: 7.625}\r\n\t]\r\n); // -> true</pre>\r\n\r\n<h3>geolib.isPointInCircle(object latlng, object center, integer radius)</h3>\r\n\r\nSimilar to is point inside: checks whether a point is inside of a circle or not. \r\n\r\nReturns true or false\r\n\r\n<h4>Example</h4>\r\n\r\n<pre>// checks if 51.525, 7.4575 is within a radius of 5km from 51.5175, 7.4678\r\ngeolib.isPointInCircle(\r\n\t{latitude: 51.525, longitude: 7.4575},\r\n\t{latitude: 51.5175, longitude: 7.4678}, \r\n\t5000\r\n);</pre>\r\n\r\n<h3>geolib.orderByDistance(object latlng, mixed coords)</h3>\r\n\r\nSorts an object or array of coords by distance from a reference coordinate\r\n\r\nReturns a sorted array [{latitude: x, longitude: y, distance: z, key: property}]\r\n\r\n<h4>Examples</h4>\r\n\r\n<pre>\r\n// coords array\r\ngeolib.orderByDistance({latitude: 51.515, longitude: 7.453619}, [\r\n\t{latitude: 52.516272, longitude: 13.377722}, \r\n\t{latitude: 51.518, longitude: 7.45425}, \r\n\t{latitude: 51.503333, longitude: -0.119722}\r\n]);\r\n\r\n// coords object\r\ngeolib.orderByDistance({latitude: 51.515, longitude: 7.453619}, {\r\n\ta: {latitude: 52.516272, longitude: 13.377722}, \r\n\tb: {latitude: 51.518, longitude: 7.45425}, \r\n\tc: {latitude: 51.503333, longitude: -0.119722}\r\n});\r\n</pre>\r\n\r\n<h3>geolib.findNearest(object latlng, mixed coords[[, int offset], int limit])</h3>\r\n\r\nFinds the nearest coordinate to a reference coordinate.\r\n\r\n<h4>Examples</h4>\r\n\r\n<pre>var spots = {\r\n\t\"Brandenburg Gate, Berlin\": {latitude: 52.516272, longitude: 13.377722},\r\n\t\"Dortmund U-Tower\": {latitude: 51.515, longitude: 7.453619},\r\n\t\"London Eye\": {latitude: 51.503333, longitude: -0.119722},\r\n\t\"Kremlin, Moscow\": {latitude: 55.751667, longitude: 37.617778},\r\n\t\"Eiffel Tower, Paris\": {latitude: 48.8583, longitude: 2.2945},\r\n\t\"Riksdag building, Stockholm\": {latitude: 59.3275, longitude: 18.0675},\r\n\t\"Royal Palace, Oslo\": {latitude: 59.916911, longitude: 10.727567}\r\n}\r\n\r\n// in this case set offset to 1 otherwise the nearest point will always be your reference point\r\ngeolib.findNearest(spots['Dortmund U-Tower'], spots, 1) \r\n</pre>\r\n\r\n<h3>geolib.getPathLength(mixed coords)</h3>\r\n\r\nCalculates the length of a collection of coordinates\r\n\r\nReturns the length of the path in meters\r\n\r\n<h4>Example</h4>\r\n\r\n<pre>\r\n// Calculate distance from Berlin via Dortmund to London\r\ngeolib.getPathLength([\r\n\t{latitude: 52.516272, longitude: 13.377722}, // Berlin\r\n\t{latitude: 51.515, longitude: 7.453619}, // Dortmund\r\n\t{latitude: 51.503333, longitude: -0.119722} // London\r\n]); // -> 945235</pre>\r\n\r\n<h3>geolib.getSpeed(coords, coords[, options])</h3>\r\n\r\nCalculates the speed between two points within a given time span.\r\n\r\nReturns the speed in <em>options.unit</em> (default is km/h).\r\n\r\n<h4>Example</h4>\r\n\r\n<pre>\r\ngeolib.getSpeed(\r\n\t{lat: 51.567294, lng: 7.38896, time: 1360231200880}, \r\n\t{lat: 52.54944, lng: 13.468509, time: 1360245600880},\r\n\t{unit: 'mph'}\r\n); // -> 66.9408 (mph)</pre>\r\n\r\n<h3>geolib.convertUnit(string unit, float distance[, int round])</h3>\r\n\r\nConverts a given distance (in meters) to another unit.\r\n\r\n<h4>Parameters</h4>\r\n\r\n`unit` can be one of:\r\n\r\n- m (meter)\r\n- km (kilometers)\r\n- cm (centimeters)\r\n- mm (millimeters)\r\n- mi (miles)\r\n- sm (seamiles)\r\n- ft (foot)\r\n- in (inch)\r\n- yd (yards)\r\n\r\n`distance` distance to be converted (source must be in meter)\r\n\r\n`round` fractional digits\r\n\r\n<h4>Example</h4>\r\n\r\n`geolib.convertUnit('km', 14213, 2) // -> 14,21`\r\n\r\n<h3>geolib.sexagesimal2decimal(string coord)</h3>\r\n\r\nConverts a sexagesimal coordinate to decimal format\r\n\r\n<h4>Example</h4>\r\n\r\n`geolib.sexagesimal2decimal(\"51° 29' 46\\\" N\")`\r\n\r\n<h3>geolib.decimal2sexagesimal(float coord)</h3>\r\n\r\nConverts a decimal coordinate to sexagesimal format\r\n\r\n<h4>Example</h4>\r\n\r\n`geolib.decimal2sexagesimal(51.49611111); // -> 51° 29' 46.00`\r\n\r\n<h3>geolib.latitude(object latlng)</h3>\r\n<h3>geolib.longitude(object latlng)</h3>\r\n<h3>geolib.elevation(object latlng)</h3>\r\n\r\nReturns the latitude/longitude/elevation for a given point and converts it to decimal.\r\n\r\nWorks with:\r\n- latitude: `latitude`, `lat`, 0 (GeoJSON array)\r\n- longitude: `longitude`, `lng`, `lon`, 1 (GeoJSON array)\r\n- elevation: `elevation`, `elev`, `alt`, `altitude`, 2 (GeoJSON array)\r\n\r\n<h4>Examples</h4>\r\n\r\n`geolib.latitude({lat: 51.49611, lng: 7.38896}); // -> 51.49611`\r\n`geolib.longitude({lat: 51.49611, lng: 7.38896}); // -> 7.38896`\r\n\r\n<h3>geolib.useDecimal(mixed latlng)</h3>\r\n\r\nChecks if a coordinate is already in decimal format and, if not, converts it to\r\n\r\n<h4>Example</h4>\r\n\r\n<pre>geolib.useDecimal(\"51° 29' 46\\\" N\"); // -> 51.59611111\r\ngeolib.useDecimal(51.59611111) // -> 51.59611111</pre>\r\n\r\n<h2>Changelog</h2>\r\n<h3>v2.0.0+beta1</h3>\r\n- Dropped support for IE6, IE7, IE8\r\n- Added new methods `geolib.latitude()`, `geolib.longitude()`, `geolib.elevation()` to get latitude, longitude or elevation of points. Will be converted to decimal format automatically\r\n- Added new method `geolib.extend()` to extend geolib object\r\n- Added support for GeoJSON format (`[lon, lat, elev]`)\r\n- Added property `geolib.version` to query the currently used version\r\n- Moved `geolib.elevation` to an optional module (`geolib.elevation.js`)\r\n- Using `Object.create(Geolib.prototype)` instead of object literal `{}`\r\n- New folder structure: compiled `geolib.js` can now be found in `dist/` instead of root dir\r\n- Improved Grunt build task",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/manuelbieh/geolib/issues"
  },
  "_id": "geolib@2.0.14",
  "_from": "geolib@*"
}
